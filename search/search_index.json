{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ESP IoT Framework This frameworks intention is to simplify the development of ESP32 IoT Devices, which interact with AWS Services. The framework is complemented by the AWS IoT Framework","title":"Home"},{"location":"#esp-iot-framework","text":"This frameworks intention is to simplify the development of ESP32 IoT Devices, which interact with AWS Services. The framework is complemented by the AWS IoT Framework","title":"ESP IoT Framework"},{"location":"software-planning/connection-handler/","text":"Class - ConnectionHandler The purpose of this class is to ensure that every remote connection is alive and maintained (Wifi, MQTT to broker). Features The main structure contains a state machine which handles the connection to the Wifi, sets up a TLS client for MQTT, enables a connection to the AWS MQTT Broker. Structure Basic UML in order to understand the structure of the class classDiagram class ConnectionHandler{ +ESPWifi esp_wifi +ESPLogger esp_logger +EspConfig *esp_config +MQTTClient *mqtt_client +enum states -ConnectionHandler() -state connectionStateMachine() }","title":"Class - ConnectionHandler"},{"location":"software-planning/connection-handler/#class-connectionhandler","text":"The purpose of this class is to ensure that every remote connection is alive and maintained (Wifi, MQTT to broker).","title":"Class - ConnectionHandler"},{"location":"software-planning/connection-handler/#features","text":"The main structure contains a state machine which handles the connection to the Wifi, sets up a TLS client for MQTT, enables a connection to the AWS MQTT Broker.","title":"Features"},{"location":"software-planning/connection-handler/#structure","text":"Basic UML in order to understand the structure of the class classDiagram class ConnectionHandler{ +ESPWifi esp_wifi +ESPLogger esp_logger +EspConfig *esp_config +MQTTClient *mqtt_client +enum states -ConnectionHandler() -state connectionStateMachine() }","title":"Structure"},{"location":"software-planning/sensors/","text":"Structure for implementing Sensor Modules A sensor module is a a type of measuring device which can be attached to the ESP32 via a serial connection (I2C, 1WIRE). The sensors of the module measures physical quantities like temperature or humidity, etc. In order to get a general form for adding new sensor modules to the framework the following points should be taken into account: A newly written class for a sensor module should always implement the EspComponent superclass. That is necessary to ensure a general structure when calling the new sensor modules object. The measured physical values which can be read of the sensor should be fed into a new instance of the sensor class. Structure Basic UML in order to understand the structure. The implemented sensor module DHT22 is just an example. classDiagram class EspComponent{ -void setup() -void setup(T setup_config) -void update() -void setValue() } class Sensor { +float temperature -char* sensor_type -char* mqtt_topic -Sensor(char* sensor_type, char* mqtt_topic) -void setValue(float sensor_value) -void updateValue() } class DHT22 { -Sensor temperature -Sensor humidity -void setup() -void setValue() -void update() } EspComponent < |-- DHT22 Sensor --> DHT22 : contains","title":"Sensors"},{"location":"software-planning/sensors/#structure-for-implementing-sensor-modules","text":"A sensor module is a a type of measuring device which can be attached to the ESP32 via a serial connection (I2C, 1WIRE). The sensors of the module measures physical quantities like temperature or humidity, etc. In order to get a general form for adding new sensor modules to the framework the following points should be taken into account: A newly written class for a sensor module should always implement the EspComponent superclass. That is necessary to ensure a general structure when calling the new sensor modules object. The measured physical values which can be read of the sensor should be fed into a new instance of the sensor class.","title":"Structure for implementing Sensor Modules"},{"location":"software-planning/sensors/#structure","text":"Basic UML in order to understand the structure. The implemented sensor module DHT22 is just an example. classDiagram class EspComponent{ -void setup() -void setup(T setup_config) -void update() -void setValue() } class Sensor { +float temperature -char* sensor_type -char* mqtt_topic -Sensor(char* sensor_type, char* mqtt_topic) -void setValue(float sensor_value) -void updateValue() } class DHT22 { -Sensor temperature -Sensor humidity -void setup() -void setValue() -void update() } EspComponent < |-- DHT22 Sensor --> DHT22 : contains","title":"Structure"}]}